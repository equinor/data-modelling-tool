---
language: python

services:
  - docker

env:
  global:
    - IMAGE_REPO=dmt
    - IMAGE_REGISTRY=mariner.azurecr.io
    - FULL_IMAGE_REPO=$IMAGE_REGISTRY/$IMAGE_REPO
    - API_IMAGE=$FULL_IMAGE_REPO/api
    - WEB_IMAGE=$FULL_IMAGE_REPO/web
    - NGINX_IMAGE=$FULL_IMAGE_REPO/nginx

stages:
  - build-publish
  - tests
  - name: deploy
    if: branch = master

before_install:
  - pip3 install doit

jobs:
  include:
    - stage: build-publish
      name: "Build API"
      before_script: ./travis-scripts.sh pull-api
      script:
        - docker build --cache-from $API_IMAGE --tag $API_IMAGE ./api/
        - docker push "$API_IMAGE"
        - |
          if [ ! -z "$TRAVIS_TAG" ]; then
            docker tag "$API_IMAGE" "$API_IMAGE:$TRAVIS_TAG"
            docker push "$API_IMAGE:$TRAVIS_TAG"
          fi

    - stage: build-publish
      name: "Build Web"
      before_script: ./travis-scripts.sh pull-web
      script:
        - docker build --cache-from "$WEB_IMAGE" --tag $WEB_IMAGE ./web/
        - docker push $WEB_IMAGE
        - |
          if [ ! -z "$TRAVIS_TAG" ]; then
            docker tag "$WEB_IMAGE" "$WEB_IMAGE:$TRAVIS_TAG"
            docker push "$WEB_IMAGE:$TRAVIS_TAG"
          fi

    - stage: build-publish
      name: "Build Nginx"
      before_script: ./travis-scripts.sh pull-nginx
      script:
        - docker build --cache-from "$NGINX_IMAGE" --tag $NGINX_IMAGE ./nginx/
        - docker push "$NGINX_IMAGE"
        - |
          if [ ! -z "$TRAVIS_TAG" ]; then
            docker tag "$NGINX_IMAGE" "$NGINX_IMAGE:$TRAVIS_TAG"
            docker push "$NGINX_IMAGE:$TRAVIS_TAG"
          fi

    - stage: tests
      name: "API - BDD Tests"
      before_script: ./travis-scripts.sh build-api-dev-image
      script: doit test:api:bdd -f ci

    - stage: tests
      name: "API - Unit Tests"
      before_script: ./travis-scripts.sh build-api-dev-image
      script: doit test:api:unit -f ci

    - stage: tests
      name: "Web - Tests"
      before_script: ./travis-scripts.sh pull-web
      script: doit test:web:unit -e=CI=true

    - stage: deploy
      name: "Reset database"
      before_script: ./travis-scripts.sh pull-api
      script:
        - docker-compose run -e ENVIRONMENT=dev api ./reset-database.sh
