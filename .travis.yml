---
language: python

services:
  - docker

env:
  global:
    - IMAGE_REPO=dmt
    - IMAGE_REGISTRY=mariner.azurecr.io
    - FULL_IMAGE_REPO=$IMAGE_REGISTRY/$IMAGE_REPO
    - API_IMAGE=$FULL_IMAGE_REPO/api
    - WEB_IMAGE=$FULL_IMAGE_REPO/web
    - NGINX_IMAGE=$FULL_IMAGE_REPO/nginx

stages:
  - build
  - tests
  - name: deploy-dev
    if: branch = master
  - name: deploy-features
    if: branch =~ ^features/.*$
  - name: update-core-prod
    if: branch = stable

before_install:
  - pip3 install doit

jobs:
  include:
    - stage: build
      name: "Build API"
      before_script: ./travis-scripts.sh pull $API_IMAGE
      script:
        - docker build --cache-from $API_IMAGE --tag $API_IMAGE ./api/
        - docker push "$API_IMAGE"
        - ./travis-scripts.sh tags $API_IMAGE

    - stage: build
      name: "Build Web"
      before_script: ./travis-scripts.sh pull $WEB_IMAGE
      script:
        - docker build --cache-from "$WEB_IMAGE" --tag $WEB_IMAGE ./web/
        - docker push $WEB_IMAGE
        - ./travis-scripts.sh tags "$WEB_IMAGE"

    - stage: build
      name: "Build Nginx"
      before_script: ./travis-scripts.sh pull $NGINX_IMAGE
      script:
        - docker build --cache-from "$NGINX_IMAGE" --tag $NGINX_IMAGE ./nginx/
        - docker push "$NGINX_IMAGE"
        - ./travis-scripts.sh tags "$NGINX_IMAGE"

    - stage: tests
      name: "API - BDD Tests"
      before_script: ./travis-scripts.sh build-api-dev-image
      script: ./travis-scripts.sh bdd_tests

    - stage: tests
      name: "API - Unit Tests"
      before_script: ./travis-scripts.sh build-api-dev-image
      script: ./travis-scripts.sh unit_tests

    - stage: tests
      name: "Web - Tests"
      before_script: ./travis-scripts.sh pull $WEB_IMAGE
      script: ./travis-scripts.sh web_tests

    - stage: deploy-dev
      name: "Reset dev database"
      before_script: ./travis-scripts.sh pull $API_IMAGE
      script:
        - docker-compose run -e ENVIRONMENT=dev api ./reset-database.sh

    - stage: deploy-features
      name: "Reset features database"
      before_script: ./travis-scripts.sh pull $API_IMAGE
      script:
        - docker-compose run -e ENVIRONMENT=features api ./reset-database.sh

    - stage: update-core-prod
      name: "Update system collection in prod"
      before_script: ./travis-scripts.sh pull $API_IMAGE
      script:
        - docker pull mariner.azurecr.io/dmt/api:stable
        - docker run -e ENVIRONMENT=prod -e MONGO_AZURE_URI="$MONGO_AZURE_URI" mariner.azurecr.io/dmt/api:stable flask reset-core-packages