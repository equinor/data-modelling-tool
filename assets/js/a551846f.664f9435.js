"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[253],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=i.createContext({}),u=function(e){var t=i.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(a.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,g=m["".concat(a,".").concat(d)]||m[d]||c[d]||l;return n?i.createElement(g,r(r({ref:t},p),{},{components:n})):i.createElement(g,r({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=m;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var u=2;u<l;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5704:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var i=n(7462),o=(n(7294),n(3905));const l={title:"Plugins",sidebar_position:3},r=void 0,s={unversionedId:"concepts/plugins",id:"concepts/plugins",title:"Plugins",description:"Add functionality and customize your applications using custom plugins.",source:"@site/docs/concepts/plugins.md",sourceDirName:"concepts",slug:"/concepts/plugins",permalink:"/data-modelling-tool/docs/concepts/plugins",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/concepts/plugins.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Plugins",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Recipes",permalink:"/data-modelling-tool/docs/concepts/recipes"},next:{title:"Data sources",permalink:"/data-modelling-tool/docs/concepts/data-sources"}},a={},u=[{value:"What is a Plugin?",id:"what-is-a-plugin",level:2},{value:"Loading custom plugins",id:"loading-custom-plugins",level:2},{value:"Creating own plugins",id:"creating-own-plugins",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Add functionality and customize your applications using custom plugins."),(0,o.kt)("p",null,"Custom plugins are Node.js packages that implement the DMT APIs (interfaces)."),(0,o.kt)("p",null,"There will be many types of custom plugins, but for now we support only UI plugins."),(0,o.kt)("h2",{id:"what-is-a-plugin"},"What is a Plugin?"),(0,o.kt)("p",null,"All plugins should be placed under the /custom-plugins folder."),(0,o.kt)("p",null,"Custom plugins are Node.js packages that implement DMT APIs (interfaces). For larger, more complex custom applications, plugins let you modularize your site customizations into site-specific functionality."),(0,o.kt)("p",null,"One of the best ways to add functionality to DMT applications is through the plugin system. DMT applications is designed to be extensible, which means plugins are able to extend and modify just about everything DMT does."),(0,o.kt)("p",null,"Of the many possibilities, plugins can:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Show custom display for certain documents")),(0,o.kt)("h2",{id:"loading-custom-plugins"},"Loading custom plugins"),(0,o.kt)("p",null,"Add the custom plugins under the /custom-plugins folder like shown here."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"web/\n|_ custom-plugins/\n  |_ a-custom-plugin/\n    |_ package.json\n    |_ src/\n      |_ index.tsx\n|_ plugins.js\n")),(0,o.kt)("p",null,"Add the plugin (package name), e.g a plugin called custom-plugin, into the plugins.js file like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export default [\n    // These are included by default\n    import('@dmt/default-pdf'),\n    import('@dmt/default-preview'),\n    // The extra plugin to be loaded\n    import('custom-plugin')\n  ]\n")),(0,o.kt)("p",null,"Then, build the docker container again, so that the plugin will be installed."),(0,o.kt)("h2",{id:"creating-own-plugins"},"Creating own plugins"),(0,o.kt)("p",null,"You may be looking to build a plugin that doesn\u2019t exist yet, or you may just be curious to know more about the anatomy of a custom plugin (file structure, etc)."),(0,o.kt)("p",null,"A package.json is required."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "@dmt/custom-plugin",\n  "version": "1.0.0",\n  "main": "src/index.tsx",\n  "dependencies": {\n    "@dmt/common": "x.x.x"\n  }\n}\n')),(0,o.kt)("p",null,"===== Creating a UI plugin"),(0,o.kt)("p",null,"This is the template for a UI plugin."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react'\nimport { DmtPluginType, DmtUIPlugin } from '@dmt/common'\n\nexport const pluginName = 'custom-plugin'\nexport const pluginType = DmtPluginType.UI\n\nexport const PluginComponent = (props: DmtUIPlugin) => {\n  return (\n    <div>\n      Plugin content goes here!\n    </div>\n  )\n}\n")),(0,o.kt)("p",null,"Everything returned from the PluginComponent will be rendered."),(0,o.kt)("p",null,"The UI plugin recipes will use the pluginName in the plugin field, which means that this UI recipe will use that plugin, like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "uiRecipes": [\n    {\n      "name": "A custom view",\n      "type": "system/SIMOS/UiRecipe",\n      "description": "This shows a custom view",\n      "plugin": "custom-plugin",\n      "options": [],\n      "attributes": []\n    }\n  ]\n}\n')))}c.isMDXComponent=!0}}]);