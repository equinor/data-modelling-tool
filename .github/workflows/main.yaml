name: CI

on: push

env:
  APP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.K8S_CREDENTIALS }}
  IMAGE_REPO: dmt
  IMAGE_REGISTRY: mariner.azurecr.io
  FULL_IMAGE_REPO: mariner.azurecr.io/dmt
  API_IMAGE: mariner.azurecr.io/dmt/api
  WEB_IMAGE: mariner.azurecr.io/dmt/web
  NGINX_IMAGE: mariner.azurecr.io/dmt/nginx
  RADIX_CLUSTER: playground
  DMT_API_CONTAINER_NAME: /data-modelling-tool_api_1

jobs:
  test-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: "Print ENVIRONMENT"
        run: |
          echo "$IMAGE_REPO"
          echo "$IMAGE_REGISTRY"
          echo "$FULL_IMAGE_REPO"
          echo $API_IMAGE
          echo $WEB_IMAGE
          echo $NGINX_IMAGE
          echo $GITHUB_REF
          echo $GITHUB_SHA
          echo $DMT_API_CONTAINER_NAME

      - name: "Docker Login"
        run: docker login -u mariner -p ${{ secrets.ACR_SECRET }} $IMAGE_REGISTRY

      - name: "Pull latest"
        run: docker pull $API_IMAGE

      - name: "Clone DMSS for blueprints"
        run: |
          eval $(ssh-agent)
          export GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no' &&
          ssh-add - <<< "${{ secrets.DMSS_DEPLOY_KEY }}" &&
          git clone git@github.com:equinor/data-modelling-storage-service api/src/dmss

      - name: "Build API test image"
        run: docker build --cache-from $API_IMAGE --target development --tag api-development ./api

      - name: "Black Linting"
        run: docker run --rm api-development black --check --diff .

      - name: "Bandit Static Code Security Analyzis"
        run: docker run --rm api-development bandit --recursive . --exclude ./tests,./dmss

      - name: "Safety - Dependencies CVE Check"
        run: docker run --rm api-development safety check

      - name: "API UnitTests"
        run: docker run --rm api-development pytest tests

      - name: "API BDD Tests"
        run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml run api behave

  test-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: "Build Web Image"
        run: |
          docker login -u mariner -p ${{ secrets.ACR_SECRET }} $IMAGE_REGISTRY
          docker pull $WEB_IMAGE
          docker build --cache-from $WEB_IMAGE --target development --tag web-development ./web

      - name: "Web Tests"
        run: docker-compose -f docker-compose.yml  -f docker-compose.ci.yml run web yarn test

  build-and-publish-web-master:
    needs: test-web
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: "Set ENV variables"
        run: |
          echo "COMMIT_REF=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV

      - name: "Build and Publish Web"
        run: |
          echo "Tagging with $COMMIT_REF"
          docker login -u mariner -p ${{ secrets.ACR_SECRET }} $IMAGE_REGISTRY
          docker pull $WEB_IMAGE
          echo $(git log -n 1 --format=format:'%h% %>(12) ^Cs %>(12,mtrunc)%aN%  %s %D') > ./web/app/public/version.txt
          docker build --cache-from $WEB_IMAGE --tag $WEB_IMAGE ./web
          docker tag $WEB_IMAGE $WEB_IMAGE:latest
          docker tag $WEB_IMAGE $WEB_IMAGE:$COMMIT_REF
          docker push $WEB_IMAGE
          docker push $WEB_IMAGE:latest
          docker push $WEB_IMAGE:$COMMIT_REF

  build-and-publish-api-master:
    needs: test-api
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: "Set ENV variables"
        run: |
          echo "COMMIT_REF=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV

      - name: "Build and Publish API"
        run: |
          echo "Tagging with $COMMIT_REF"
          docker login -u mariner -p ${{ secrets.ACR_SECRET }} $IMAGE_REGISTRY
          docker pull $API_IMAGE
          echo $(git log -n 1 --format=format:'%h% %>(12) ^Cs %>(12,mtrunc)%aN%  %s %D') > ./api/src/version.txt
          docker build --cache-from $API_IMAGE --tag $API_IMAGE ./api
          docker tag $API_IMAGE $API_IMAGE:latest
          docker tag $API_IMAGE $API_IMAGE:$COMMIT_REF
          docker push $API_IMAGE
          docker push $API_IMAGE:latest
          docker push $API_IMAGE:$COMMIT_REF

  deploy-master-to-radix:
    needs: [build-and-publish-api-master, build-and-publish-web-master]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Deploy Master on Radix
        uses: equinor/radix-github-actions@master
        with:
          args: >
            create job
            deploy
            --context $RADIX_CLUSTER
            --from-config
            -e dev
            -f

  release-api:
    needs: test-api
    if: contains(github.ref, 'tags')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: "Set ENV variables"
        run: |
          echo $(echo $GITHUB_REF | cut -d / -f 3)
          echo "RELEASE_TAG=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_ENV

      - name: "Build and Publish API Release"
        run: |
          echo "Tagging with $RELEASE_TAG"
          docker login -u mariner -p ${{ secrets.ACR_SECRET }} $IMAGE_REGISTRY
          docker pull $API_IMAGE
          echo $(git log -n 1 --format=format:'%h% %>(12) ^Cs %>(12,mtrunc)%aN%  %s %D') > ./api/src/version.txt
          DOCKER_BUILDKIT=1 docker build --cache-from $API_IMAGE --tag $API_IMAGE:$RELEASE_TAG ./api
          docker tag $API_IMAGE:$RELEASE_TAG $API_IMAGE:release
          docker push $API_IMAGE:$RELEASE_TAG
          docker push $API_IMAGE:release

  release-web:
    needs: test-web
    if: contains(github.ref, 'tags')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: "Set ENV variables"
        run: |
          echo $(echo $GITHUB_REF | cut -d / -f 3)
          echo "RELEASE_TAG=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_ENV

      - name: "Build and Publish Web Release"
        run: |
          echo "Tagging with $RELEASE_TAG"
          docker login -u mariner -p ${{ secrets.ACR_SECRET }} $IMAGE_REGISTRY
          docker pull $WEB_IMAGE
          echo $(git log -n 1 --format=format:'%h% %>(12) ^Cs %>(12,mtrunc)%aN%  %s %D') > ./web/app/public/version.txt
          docker build --cache-from $WEB_IMAGE --tag $WEB_IMAGE:$RELEASE_TAG ./web
          docker tag $WEB_IMAGE:$RELEASE_TAG $WEB_IMAGE:release
          docker push $WEB_IMAGE:$RELEASE_TAG
          docker push $WEB_IMAGE:release

  deploy-release-to-radix:
    needs: [release-api, release-web]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Deploy Prod on Radix
        uses: equinor/radix-github-actions@master
        with:
          args: >
            create job
            deploy
            --context $RADIX_CLUSTER
            --from-config
            -e prod
            -f

  store-images-as-artifacts:
    needs: [build-and-publish-api-master, build-and-publish-web-master]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: pull latest DMT images
        run: |
          docker login -u mariner -p ${{ secrets.ACR_SECRET }} $IMAGE_REGISTRY
          docker pull $WEB_IMAGE
          docker pull $API_IMAGE
          docker pull $NGINX_IMAGE

      - name: save docker images
        run: |
          docker save $API_IMAGE $WEB_IMAGE $NGINX_IMAGE > DMT_IMAGES.tar
          ls -sh DMT_IMAGES.tar

      - name: upload images as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dmt-artifact
          path: DMT_IMAGES.tar
