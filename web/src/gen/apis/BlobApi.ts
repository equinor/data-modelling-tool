/* tslint:disable */
/* eslint-disable */
/**
 * Data Modelling Storage Service API
 * Data storage service for DMT
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'

export interface GetBlobByIdRequest {
  dataSourceId: string
  blobId: string
}

/**
 *
 */
export class BlobApi extends runtime.BaseAPI {
  /**
   * Get blob by ID
   */
  async getBlobByIdRaw(
    requestParameters: GetBlobByIdRequest
  ): Promise<runtime.ApiResponse<Blob>> {
    if (
      requestParameters.dataSourceId === null ||
      requestParameters.dataSourceId === undefined
    ) {
      throw new runtime.RequiredError(
        'dataSourceId',
        'Required parameter requestParameters.dataSourceId was null or undefined when calling getBlobById.'
      )
    }

    if (
      requestParameters.blobId === null ||
      requestParameters.blobId === undefined
    ) {
      throw new runtime.RequiredError(
        'blobId',
        'Required parameter requestParameters.blobId was null or undefined when calling getBlobById.'
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/blobs/{dataSourceId}/{blobId}`
        .replace(
          `{${'dataSourceId'}}`,
          encodeURIComponent(String(requestParameters.dataSourceId))
        )
        .replace(
          `{${'blobId'}}`,
          encodeURIComponent(String(requestParameters.blobId))
        ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.BlobApiResponse(response)
  }

  /**
   * Get blob by ID
   */
  async getBlobById(requestParameters: GetBlobByIdRequest): Promise<Blob> {
    const response = await this.getBlobByIdRaw(requestParameters)
    return await response.value()
  }
}
