/* tslint:disable */
/* eslint-disable */
/**
 * Data Modelling Storage Service API
 * Data storage service for DMT
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  InlineObject,
  InlineObjectFromJSON,
  InlineObjectToJSON,
  InlineObject2,
  InlineObject2FromJSON,
  InlineObject2ToJSON,
  InlineObject3,
  InlineObject3FromJSON,
  InlineObject3ToJSON,
  InlineObject4,
  InlineObject4FromJSON,
  InlineObject4ToJSON,
  InlineResponse2001,
  InlineResponse2001FromJSON,
  InlineResponse2001ToJSON,
} from '../models'

export interface AddDocumentRequest {
  dataSourceId: string
  requestBody: { [key: string]: object }
}

export interface AddPackageRequest {
  dataSourceId: string
  requestBody: { [key: string]: object }
}

export interface AddRawRequest {
  dataSourceId: string
  requestBody: { [key: string]: object }
}

export interface AddToParentRequest {
  dataSourceId: string
  inlineObject: InlineObject
}

export interface AddToPathRequest {
  dataSourceId: string
  directory?: string
  document?: string
  files?: Array<Blob>
}

export interface MoveRequest {
  dataSourceId: string
  requestBody: { [key: string]: object }
}

export interface RemoveRequest {
  dataSourceId: string
  inlineObject2: InlineObject2
}

export interface RemoveByPathRequest {
  dataSourceId: string
  inlineObject3: InlineObject3
}

export interface RenameRequest {
  dataSourceId: string
  inlineObject4: InlineObject4
}

/**
 *
 */
export class ExplorerApi extends runtime.BaseAPI {
  /**
   * Add document
   */
  async addDocumentRaw(
    requestParameters: AddDocumentRequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.dataSourceId === null ||
      requestParameters.dataSourceId === undefined
    ) {
      throw new runtime.RequiredError(
        'dataSourceId',
        'Required parameter requestParameters.dataSourceId was null or undefined when calling addDocument.'
      )
    }

    if (
      requestParameters.requestBody === null ||
      requestParameters.requestBody === undefined
    ) {
      throw new runtime.RequiredError(
        'requestBody',
        'Required parameter requestParameters.requestBody was null or undefined when calling addDocument.'
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/explorer/{dataSourceId}/add-document`.replace(
        `{${'dataSourceId'}}`,
        encodeURIComponent(String(requestParameters.dataSourceId))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.requestBody,
    })

    return new runtime.TextApiResponse(response) as any
  }

  /**
   * Add document
   */
  async addDocument(requestParameters: AddDocumentRequest): Promise<string> {
    const response = await this.addDocumentRaw(requestParameters)
    return await response.value()
  }

  /**
   * Add package
   */
  async addPackageRaw(
    requestParameters: AddPackageRequest
  ): Promise<runtime.ApiResponse<{ [key: string]: object }>> {
    if (
      requestParameters.dataSourceId === null ||
      requestParameters.dataSourceId === undefined
    ) {
      throw new runtime.RequiredError(
        'dataSourceId',
        'Required parameter requestParameters.dataSourceId was null or undefined when calling addPackage.'
      )
    }

    if (
      requestParameters.requestBody === null ||
      requestParameters.requestBody === undefined
    ) {
      throw new runtime.RequiredError(
        'requestBody',
        'Required parameter requestParameters.requestBody was null or undefined when calling addPackage.'
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/explorer/{dataSourceId}/add-package`.replace(
        `{${'dataSourceId'}}`,
        encodeURIComponent(String(requestParameters.dataSourceId))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.requestBody,
    })

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Add package
   */
  async addPackage(
    requestParameters: AddPackageRequest
  ): Promise<{ [key: string]: object }> {
    const response = await this.addPackageRaw(requestParameters)
    return await response.value()
  }

  /**
   * Add raw document
   */
  async addRawRaw(
    requestParameters: AddRawRequest
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.dataSourceId === null ||
      requestParameters.dataSourceId === undefined
    ) {
      throw new runtime.RequiredError(
        'dataSourceId',
        'Required parameter requestParameters.dataSourceId was null or undefined when calling addRaw.'
      )
    }

    if (
      requestParameters.requestBody === null ||
      requestParameters.requestBody === undefined
    ) {
      throw new runtime.RequiredError(
        'requestBody',
        'Required parameter requestParameters.requestBody was null or undefined when calling addRaw.'
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/explorer/{dataSourceId}/add-raw`.replace(
        `{${'dataSourceId'}}`,
        encodeURIComponent(String(requestParameters.dataSourceId))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.requestBody,
    })

    return new runtime.TextApiResponse(response) as any
  }

  /**
   * Add raw document
   */
  async addRaw(requestParameters: AddRawRequest): Promise<string> {
    const response = await this.addRawRaw(requestParameters)
    return await response.value()
  }

  /**
   * Add document to parent
   */
  async addToParentRaw(
    requestParameters: AddToParentRequest
  ): Promise<runtime.ApiResponse<InlineResponse2001>> {
    if (
      requestParameters.dataSourceId === null ||
      requestParameters.dataSourceId === undefined
    ) {
      throw new runtime.RequiredError(
        'dataSourceId',
        'Required parameter requestParameters.dataSourceId was null or undefined when calling addToParent.'
      )
    }

    if (
      requestParameters.inlineObject === null ||
      requestParameters.inlineObject === undefined
    ) {
      throw new runtime.RequiredError(
        'inlineObject',
        'Required parameter requestParameters.inlineObject was null or undefined when calling addToParent.'
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/explorer/{dataSourceId}/add-to-parent`.replace(
        `{${'dataSourceId'}}`,
        encodeURIComponent(String(requestParameters.dataSourceId))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: InlineObjectToJSON(requestParameters.inlineObject),
    })

    return new runtime.JSONApiResponse(response, jsonValue =>
      InlineResponse2001FromJSON(jsonValue)
    )
  }

  /**
   * Add document to parent
   */
  async addToParent(
    requestParameters: AddToParentRequest
  ): Promise<InlineResponse2001> {
    const response = await this.addToParentRaw(requestParameters)
    return await response.value()
  }

  /**
   * Add document to path
   */
  async addToPathRaw(
    requestParameters: AddToPathRequest
  ): Promise<runtime.ApiResponse<{ [key: string]: object }>> {
    if (
      requestParameters.dataSourceId === null ||
      requestParameters.dataSourceId === undefined
    ) {
      throw new runtime.RequiredError(
        'dataSourceId',
        'Required parameter requestParameters.dataSourceId was null or undefined when calling addToPath.'
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }]
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes)

    let formParams: { append(param: string, value: any): any }
    let useForm = false
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm
    if (useForm) {
      formParams = new FormData()
    } else {
      formParams = new URLSearchParams()
    }

    if (requestParameters.directory !== undefined) {
      formParams.append('directory', requestParameters.directory as any)
    }

    if (requestParameters.document !== undefined) {
      formParams.append('document', requestParameters.document as any)
    }

    if (requestParameters.files) {
      formParams.append(
        'files',
        requestParameters.files.join(runtime.COLLECTION_FORMATS['csv'])
      )
    }

    const response = await this.request({
      path: `/explorer/{dataSourceId}/add-to-path`.replace(
        `{${'dataSourceId'}}`,
        encodeURIComponent(String(requestParameters.dataSourceId))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: formParams,
    })

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Add document to path
   */
  async addToPath(
    requestParameters: AddToPathRequest
  ): Promise<{ [key: string]: object }> {
    const response = await this.addToPathRaw(requestParameters)
    return await response.value()
  }

  /**
   * Move document
   */
  async moveRaw(
    requestParameters: MoveRequest
  ): Promise<runtime.ApiResponse<{ [key: string]: object }>> {
    if (
      requestParameters.dataSourceId === null ||
      requestParameters.dataSourceId === undefined
    ) {
      throw new runtime.RequiredError(
        'dataSourceId',
        'Required parameter requestParameters.dataSourceId was null or undefined when calling move.'
      )
    }

    if (
      requestParameters.requestBody === null ||
      requestParameters.requestBody === undefined
    ) {
      throw new runtime.RequiredError(
        'requestBody',
        'Required parameter requestParameters.requestBody was null or undefined when calling move.'
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/explorer/{dataSourceId}/move`.replace(
        `{${'dataSourceId'}}`,
        encodeURIComponent(String(requestParameters.dataSourceId))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.requestBody,
    })

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Move document
   */
  async move(
    requestParameters: MoveRequest
  ): Promise<{ [key: string]: object }> {
    const response = await this.moveRaw(requestParameters)
    return await response.value()
  }

  /**
   * Remove document
   */
  async removeRaw(
    requestParameters: RemoveRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.dataSourceId === null ||
      requestParameters.dataSourceId === undefined
    ) {
      throw new runtime.RequiredError(
        'dataSourceId',
        'Required parameter requestParameters.dataSourceId was null or undefined when calling remove.'
      )
    }

    if (
      requestParameters.inlineObject2 === null ||
      requestParameters.inlineObject2 === undefined
    ) {
      throw new runtime.RequiredError(
        'inlineObject2',
        'Required parameter requestParameters.inlineObject2 was null or undefined when calling remove.'
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/explorer/{dataSourceId}/remove`.replace(
        `{${'dataSourceId'}}`,
        encodeURIComponent(String(requestParameters.dataSourceId))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: InlineObject2ToJSON(requestParameters.inlineObject2),
    })

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Remove document
   */
  async remove(requestParameters: RemoveRequest): Promise<object> {
    const response = await this.removeRaw(requestParameters)
    return await response.value()
  }

  /**
   * Remove document by path
   */
  async removeByPathRaw(
    requestParameters: RemoveByPathRequest
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.dataSourceId === null ||
      requestParameters.dataSourceId === undefined
    ) {
      throw new runtime.RequiredError(
        'dataSourceId',
        'Required parameter requestParameters.dataSourceId was null or undefined when calling removeByPath.'
      )
    }

    if (
      requestParameters.inlineObject3 === null ||
      requestParameters.inlineObject3 === undefined
    ) {
      throw new runtime.RequiredError(
        'inlineObject3',
        'Required parameter requestParameters.inlineObject3 was null or undefined when calling removeByPath.'
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/explorer/{dataSourceId}/remove-by-path`.replace(
        `{${'dataSourceId'}}`,
        encodeURIComponent(String(requestParameters.dataSourceId))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: InlineObject3ToJSON(requestParameters.inlineObject3),
    })

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Remove document by path
   */
  async removeByPath(requestParameters: RemoveByPathRequest): Promise<object> {
    const response = await this.removeByPathRaw(requestParameters)
    return await response.value()
  }

  /**
   * Rename document
   */
  async renameRaw(
    requestParameters: RenameRequest
  ): Promise<runtime.ApiResponse<{ [key: string]: object }>> {
    if (
      requestParameters.dataSourceId === null ||
      requestParameters.dataSourceId === undefined
    ) {
      throw new runtime.RequiredError(
        'dataSourceId',
        'Required parameter requestParameters.dataSourceId was null or undefined when calling rename.'
      )
    }

    if (
      requestParameters.inlineObject4 === null ||
      requestParameters.inlineObject4 === undefined
    ) {
      throw new runtime.RequiredError(
        'inlineObject4',
        'Required parameter requestParameters.inlineObject4 was null or undefined when calling rename.'
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/explorer/{dataSourceId}/rename`.replace(
        `{${'dataSourceId'}}`,
        encodeURIComponent(String(requestParameters.dataSourceId))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: InlineObject4ToJSON(requestParameters.inlineObject4),
    })

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Rename document
   */
  async rename(
    requestParameters: RenameRequest
  ): Promise<{ [key: string]: object }> {
    const response = await this.renameRaw(requestParameters)
    return await response.value()
  }
}
