/* tslint:disable */
/* eslint-disable */
/**
 * Data Modelling Storage Service API
 * Data storage service for DMT
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  InlineObject5,
  InlineObject5FromJSON,
  InlineObject5ToJSON,
} from '../models'

export interface SearchEntitiesRequest {
  dataSourceId: string
  inlineObject5: InlineObject5
}

/**
 *
 */
export class SearchApi extends runtime.BaseAPI {
  /**
   * Search for entities
   */
  async searchEntitiesRaw(
    requestParameters: SearchEntitiesRequest
  ): Promise<runtime.ApiResponse<{ [key: string]: object }>> {
    if (
      requestParameters.dataSourceId === null ||
      requestParameters.dataSourceId === undefined
    ) {
      throw new runtime.RequiredError(
        'dataSourceId',
        'Required parameter requestParameters.dataSourceId was null or undefined when calling searchEntities.'
      )
    }

    if (
      requestParameters.inlineObject5 === null ||
      requestParameters.inlineObject5 === undefined
    ) {
      throw new runtime.RequiredError(
        'inlineObject5',
        'Required parameter requestParameters.inlineObject5 was null or undefined when calling searchEntities.'
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/search/{dataSourceId}`.replace(
        `{${'dataSourceId'}}`,
        encodeURIComponent(String(requestParameters.dataSourceId))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: InlineObject5ToJSON(requestParameters.inlineObject5),
    })

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Search for entities
   */
  async searchEntities(
    requestParameters: SearchEntitiesRequest
  ): Promise<{ [key: string]: object }> {
    const response = await this.searchEntitiesRaw(requestParameters)
    return await response.value()
  }
}
