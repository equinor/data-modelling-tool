/* tslint:disable */
/* eslint-disable */
/**
 * Data Modelling Storage Service API
 * Data storage service for DMT
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface SearchEntitiesRequest {
    dataSourceId: string;
    requestBody: { [key: string]: object; };
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Search for entities
     */
    async searchEntitiesRaw(requestParameters: SearchEntitiesRequest): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.dataSourceId === null || requestParameters.dataSourceId === undefined) {
            throw new runtime.RequiredError('dataSourceId','Required parameter requestParameters.dataSourceId was null or undefined when calling searchEntities.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling searchEntities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/search/{dataSourceId}`.replace(`{${"dataSourceId"}}`, encodeURIComponent(String(requestParameters.dataSourceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Search for entities
     */
    async searchEntities(requestParameters: SearchEntitiesRequest): Promise<{ [key: string]: object; }> {
        const response = await this.searchEntitiesRaw(requestParameters);
        return await response.value();
    }

}
