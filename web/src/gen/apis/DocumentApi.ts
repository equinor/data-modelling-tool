/* tslint:disable */
/* eslint-disable */
/**
 * Data Modelling Storage Service API
 * Data storage service for DMT
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetByIdRequest {
    dataSourceId: string;
    documentId: string;
    depth?: number;
}

export interface GetByPathRequest {
    dataSourceId: string;
    path: string;
    depth?: number;
}

export interface UpdateRequest {
    dataSourceId: string;
    documentId: string;
    requestBody: { [key: string]: object; };
    attribute?: string;
}

/**
 * 
 */
export class DocumentApi extends runtime.BaseAPI {

    /**
     * Get document by ID
     */
    async getByIdRaw(requestParameters: GetByIdRequest): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.dataSourceId === null || requestParameters.dataSourceId === undefined) {
            throw new runtime.RequiredError('dataSourceId','Required parameter requestParameters.dataSourceId was null or undefined when calling getById.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling getById.');
        }

        const queryParameters: any = {};

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/documents/{dataSourceId}/{documentId}`.replace(`{${"dataSourceId"}}`, encodeURIComponent(String(requestParameters.dataSourceId))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get document by ID
     */
    async getById(requestParameters: GetByIdRequest): Promise<{ [key: string]: object; }> {
        const response = await this.getByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get document by path
     */
    async getByPathRaw(requestParameters: GetByPathRequest): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.dataSourceId === null || requestParameters.dataSourceId === undefined) {
            throw new runtime.RequiredError('dataSourceId','Required parameter requestParameters.dataSourceId was null or undefined when calling getByPath.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling getByPath.');
        }

        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/documents-by-path/{dataSourceId}`.replace(`{${"dataSourceId"}}`, encodeURIComponent(String(requestParameters.dataSourceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get document by path
     */
    async getByPath(requestParameters: GetByPathRequest): Promise<{ [key: string]: object; }> {
        const response = await this.getByPathRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update document
     */
    async updateRaw(requestParameters: UpdateRequest): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.dataSourceId === null || requestParameters.dataSourceId === undefined) {
            throw new runtime.RequiredError('dataSourceId','Required parameter requestParameters.dataSourceId was null or undefined when calling update.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling update.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling update.');
        }

        const queryParameters: any = {};

        if (requestParameters.attribute !== undefined) {
            queryParameters['attribute'] = requestParameters.attribute;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/documents/{dataSourceId}/{documentId}`.replace(`{${"dataSourceId"}}`, encodeURIComponent(String(requestParameters.dataSourceId))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update document
     */
    async update(requestParameters: UpdateRequest): Promise<{ [key: string]: object; }> {
        const response = await this.updateRaw(requestParameters);
        return await response.value();
    }

}
