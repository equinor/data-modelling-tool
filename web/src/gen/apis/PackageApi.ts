/* tslint:disable */
/* eslint-disable */
/**
 * Data Modelling Storage Service API
 * Data storage service for DMT
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface FindByNameRequest {
    dataSourceId: string;
    name: string;
}

export interface GetRequest {
    dataSourceId: string;
}

/**
 * 
 */
export class PackageApi extends runtime.BaseAPI {

    /**
     * Query packages
     */
    async findByNameRaw(requestParameters: FindByNameRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.dataSourceId === null || requestParameters.dataSourceId === undefined) {
            throw new runtime.RequiredError('dataSourceId','Required parameter requestParameters.dataSourceId was null or undefined when calling findByName.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling findByName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packages/{dataSourceId}/findByName/{name}`.replace(`{${"dataSourceId"}}`, encodeURIComponent(String(requestParameters.dataSourceId))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Query packages
     */
    async findByName(requestParameters: FindByNameRequest): Promise<object> {
        const response = await this.findByNameRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get packages
     */
    async getRaw(requestParameters: GetRequest): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters.dataSourceId === null || requestParameters.dataSourceId === undefined) {
            throw new runtime.RequiredError('dataSourceId','Required parameter requestParameters.dataSourceId was null or undefined when calling get.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packages/{dataSourceId}`.replace(`{${"dataSourceId"}}`, encodeURIComponent(String(requestParameters.dataSourceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get packages
     */
    async get(requestParameters: GetRequest): Promise<Array<object>> {
        const response = await this.getRaw(requestParameters);
        return await response.value();
    }

}
