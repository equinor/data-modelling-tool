/* tslint:disable */
/* eslint-disable */
/**
 * Data Modelling Storage Service API
 * Data storage service for DMT
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
} from '../models';

export interface GetDataSourceRequest {
    dataSourceId: string;
}

export interface SaveRequest {
    dataSourceId: string;
    requestBody: { [key: string]: object; };
}

/**
 * 
 */
export class DatasourceApi extends runtime.BaseAPI {

    /**
     * Get all data sources
     */
    async getAllRaw(): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/data-sources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all data sources
     */
    async getAll(): Promise<Array<object>> {
        const response = await this.getAllRaw();
        return await response.value();
    }

    /**
     * Get data source
     */
    async getDataSourceRaw(requestParameters: GetDataSourceRequest): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.dataSourceId === null || requestParameters.dataSourceId === undefined) {
            throw new runtime.RequiredError('dataSourceId','Required parameter requestParameters.dataSourceId was null or undefined when calling getDataSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/data-sources/{dataSourceId}`.replace(`{${"dataSourceId"}}`, encodeURIComponent(String(requestParameters.dataSourceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get data source
     */
    async getDataSource(requestParameters: GetDataSourceRequest): Promise<{ [key: string]: object; }> {
        const response = await this.getDataSourceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Add data source
     */
    async saveRaw(requestParameters: SaveRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.dataSourceId === null || requestParameters.dataSourceId === undefined) {
            throw new runtime.RequiredError('dataSourceId','Required parameter requestParameters.dataSourceId was null or undefined when calling save.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling save.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/data-sources/{dataSourceId}`.replace(`{${"dataSourceId"}}`, encodeURIComponent(String(requestParameters.dataSourceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Add data source
     */
    async save(requestParameters: SaveRequest): Promise<InlineResponse200> {
        const response = await this.saveRaw(requestParameters);
        return await response.value();
    }

}
