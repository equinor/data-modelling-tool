/* tslint:disable */
/* eslint-disable */
/**
 * Data Modelling Storage Service
 * API for basic data modelling interaction
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
/**
 * BlobApi - axios parameter creator
 * @export
 */
export const BlobApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get By Id
         * @param {string} dataSourceId 
         * @param {string} blobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobGetById: async (dataSourceId: string, blobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('blobGetById', 'dataSourceId', dataSourceId)
            // verify required parameter 'blobId' is not null or undefined
            assertParamExists('blobGetById', 'blobId', blobId)
            const localVarPath = `/api/v1/blobs/{data_source_id}/{blob_id}`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"blob_id"}}`, encodeURIComponent(String(blobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Access-Key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload
         * @param {string} dataSourceId 
         * @param {string} blobId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobUpload: async (dataSourceId: string, blobId: string, file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('blobUpload', 'dataSourceId', dataSourceId)
            // verify required parameter 'blobId' is not null or undefined
            assertParamExists('blobUpload', 'blobId', blobId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('blobUpload', 'file', file)
            const localVarPath = `/api/v1/blobs/{data_source_id}/{blob_id}`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"blob_id"}}`, encodeURIComponent(String(blobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Access-Key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlobApi - functional programming interface
 * @export
 */
export const BlobApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlobApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get By Id
         * @param {string} dataSourceId 
         * @param {string} blobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blobGetById(dataSourceId: string, blobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blobGetById(dataSourceId, blobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload
         * @param {string} dataSourceId 
         * @param {string} blobId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blobUpload(dataSourceId: string, blobId: string, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blobUpload(dataSourceId, blobId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlobApi - factory interface
 * @export
 */
export const BlobApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlobApiFp(configuration)
    return {
        /**
         * 
         * @summary Get By Id
         * @param {string} dataSourceId 
         * @param {string} blobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobGetById(dataSourceId: string, blobId: string, options?: any): AxiosPromise<any> {
            return localVarFp.blobGetById(dataSourceId, blobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload
         * @param {string} dataSourceId 
         * @param {string} blobId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobUpload(dataSourceId: string, blobId: string, file: any, options?: any): AxiosPromise<string> {
            return localVarFp.blobUpload(dataSourceId, blobId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for blobGetById operation in BlobApi.
 * @export
 * @interface BlobApiBlobGetByIdRequest
 */
export interface BlobApiBlobGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof BlobApiBlobGetById
     */
    readonly dataSourceId: string

    /**
     * 
     * @type {string}
     * @memberof BlobApiBlobGetById
     */
    readonly blobId: string
}

/**
 * Request parameters for blobUpload operation in BlobApi.
 * @export
 * @interface BlobApiBlobUploadRequest
 */
export interface BlobApiBlobUploadRequest {
    /**
     * 
     * @type {string}
     * @memberof BlobApiBlobUpload
     */
    readonly dataSourceId: string

    /**
     * 
     * @type {string}
     * @memberof BlobApiBlobUpload
     */
    readonly blobId: string

    /**
     * 
     * @type {any}
     * @memberof BlobApiBlobUpload
     */
    readonly file: any
}

/**
 * BlobApi - object-oriented interface
 * @export
 * @class BlobApi
 * @extends {BaseAPI}
 */
export class BlobApi extends BaseAPI {
    /**
     * 
     * @summary Get By Id
     * @param {BlobApiBlobGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlobApi
     */
    public blobGetById(requestParameters: BlobApiBlobGetByIdRequest, options?: any) {
        return BlobApiFp(this.configuration).blobGetById(requestParameters.dataSourceId, requestParameters.blobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload
     * @param {BlobApiBlobUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlobApi
     */
    public blobUpload(requestParameters: BlobApiBlobUploadRequest, options?: any) {
        return BlobApiFp(this.configuration).blobUpload(requestParameters.dataSourceId, requestParameters.blobId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}
