/* tslint:disable */
/* eslint-disable */
/**
 * Data Modelling Storage Service
 * API for basic data modelling interaction
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
/**
 * BlueprintApi - axios parameter creator
 * @export
 */
export const BlueprintApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch the Blueprint of a type (including inherited attributes)
         * @summary Get Blueprint
         * @param {string} typeRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blueprintGet: async (typeRef: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeRef' is not null or undefined
            assertParamExists('blueprintGet', 'typeRef', typeRef)
            const localVarPath = `/api/v1/blueprint/{type_ref}`
                .replace(`{${"type_ref"}}`, encodeURIComponent(String(typeRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Access-Key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolve the data_source/uuid form of a blueprint to it\'s type path
         * @summary Resolve Blueprint Id
         * @param {string} absoluteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blueprintResolve: async (absoluteId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'absoluteId' is not null or undefined
            assertParamExists('blueprintResolve', 'absoluteId', absoluteId)
            const localVarPath = `/api/v1/resolve-path/{absolute_id}`
                .replace(`{${"absolute_id"}}`, encodeURIComponent(String(absoluteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Access-Key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlueprintApi - functional programming interface
 * @export
 */
export const BlueprintApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlueprintApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch the Blueprint of a type (including inherited attributes)
         * @summary Get Blueprint
         * @param {string} typeRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blueprintGet(typeRef: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blueprintGet(typeRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resolve the data_source/uuid form of a blueprint to it\'s type path
         * @summary Resolve Blueprint Id
         * @param {string} absoluteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blueprintResolve(absoluteId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blueprintResolve(absoluteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlueprintApi - factory interface
 * @export
 */
export const BlueprintApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlueprintApiFp(configuration)
    return {
        /**
         * Fetch the Blueprint of a type (including inherited attributes)
         * @summary Get Blueprint
         * @param {string} typeRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blueprintGet(typeRef: string, options?: any): AxiosPromise<object> {
            return localVarFp.blueprintGet(typeRef, options).then((request) => request(axios, basePath));
        },
        /**
         * Resolve the data_source/uuid form of a blueprint to it\'s type path
         * @summary Resolve Blueprint Id
         * @param {string} absoluteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blueprintResolve(absoluteId: string, options?: any): AxiosPromise<string> {
            return localVarFp.blueprintResolve(absoluteId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for blueprintGet operation in BlueprintApi.
 * @export
 * @interface BlueprintApiBlueprintGetRequest
 */
export interface BlueprintApiBlueprintGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BlueprintApiBlueprintGet
     */
    readonly typeRef: string
}

/**
 * Request parameters for blueprintResolve operation in BlueprintApi.
 * @export
 * @interface BlueprintApiBlueprintResolveRequest
 */
export interface BlueprintApiBlueprintResolveRequest {
    /**
     * 
     * @type {string}
     * @memberof BlueprintApiBlueprintResolve
     */
    readonly absoluteId: string
}

/**
 * BlueprintApi - object-oriented interface
 * @export
 * @class BlueprintApi
 * @extends {BaseAPI}
 */
export class BlueprintApi extends BaseAPI {
    /**
     * Fetch the Blueprint of a type (including inherited attributes)
     * @summary Get Blueprint
     * @param {BlueprintApiBlueprintGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlueprintApi
     */
    public blueprintGet(requestParameters: BlueprintApiBlueprintGetRequest, options?: any) {
        return BlueprintApiFp(this.configuration).blueprintGet(requestParameters.typeRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resolve the data_source/uuid form of a blueprint to it\'s type path
     * @summary Resolve Blueprint Id
     * @param {BlueprintApiBlueprintResolveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlueprintApi
     */
    public blueprintResolve(requestParameters: BlueprintApiBlueprintResolveRequest, options?: any) {
        return BlueprintApiFp(this.configuration).blueprintResolve(requestParameters.absoluteId, options).then((request) => request(this.axios, this.basePath));
    }
}
