/* tslint:disable */
/* eslint-disable */
/**
 * Data Modelling Storage Service
 * API for basic data modelling interaction
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
/**
 * ExplorerApi - axios parameter creator
 * @export
 */
export const ExplorerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Move
         * @param {string} dataSourceId 
         * @param {any} requestData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        explorerMove: async (dataSourceId: string, requestData: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('explorerMove', 'dataSourceId', dataSourceId)
            // verify required parameter 'requestData' is not null or undefined
            assertParamExists('explorerMove', 'requestData', requestData)
            const localVarPath = `/api/v1/explorer/{data_source_id}/move`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Access-Key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (requestData !== undefined) {
                localVarQueryParameter['request_data'] = requestData;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rename
         * @param {string} dataSourceId 
         * @param {string} documentId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        explorerRename: async (dataSourceId: string, documentId: string, parentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('explorerRename', 'dataSourceId', dataSourceId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('explorerRename', 'documentId', documentId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('explorerRename', 'parentId', parentId)
            const localVarPath = `/api/v1/explorer/{data_source_id}/rename`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Access-Key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (documentId !== undefined) {
                localVarQueryParameter['document_id'] = documentId;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parent_id'] = parentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExplorerApi - functional programming interface
 * @export
 */
export const ExplorerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExplorerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Move
         * @param {string} dataSourceId 
         * @param {any} requestData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async explorerMove(dataSourceId: string, requestData: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.explorerMove(dataSourceId, requestData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rename
         * @param {string} dataSourceId 
         * @param {string} documentId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async explorerRename(dataSourceId: string, documentId: string, parentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.explorerRename(dataSourceId, documentId, parentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExplorerApi - factory interface
 * @export
 */
export const ExplorerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExplorerApiFp(configuration)
    return {
        /**
         * 
         * @summary Move
         * @param {string} dataSourceId 
         * @param {any} requestData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        explorerMove(dataSourceId: string, requestData: any, options?: any): AxiosPromise<string> {
            return localVarFp.explorerMove(dataSourceId, requestData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rename
         * @param {string} dataSourceId 
         * @param {string} documentId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        explorerRename(dataSourceId: string, documentId: string, parentId: string, options?: any): AxiosPromise<object> {
            return localVarFp.explorerRename(dataSourceId, documentId, parentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for explorerMove operation in ExplorerApi.
 * @export
 * @interface ExplorerApiExplorerMoveRequest
 */
export interface ExplorerApiExplorerMoveRequest {
    /**
     * 
     * @type {string}
     * @memberof ExplorerApiExplorerMove
     */
    readonly dataSourceId: string

    /**
     * 
     * @type {any}
     * @memberof ExplorerApiExplorerMove
     */
    readonly requestData: any
}

/**
 * Request parameters for explorerRename operation in ExplorerApi.
 * @export
 * @interface ExplorerApiExplorerRenameRequest
 */
export interface ExplorerApiExplorerRenameRequest {
    /**
     * 
     * @type {string}
     * @memberof ExplorerApiExplorerRename
     */
    readonly dataSourceId: string

    /**
     * 
     * @type {string}
     * @memberof ExplorerApiExplorerRename
     */
    readonly documentId: string

    /**
     * 
     * @type {string}
     * @memberof ExplorerApiExplorerRename
     */
    readonly parentId: string
}

/**
 * ExplorerApi - object-oriented interface
 * @export
 * @class ExplorerApi
 * @extends {BaseAPI}
 */
export class ExplorerApi extends BaseAPI {
    /**
     * 
     * @summary Move
     * @param {ExplorerApiExplorerMoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorerApi
     */
    public explorerMove(requestParameters: ExplorerApiExplorerMoveRequest, options?: any) {
        return ExplorerApiFp(this.configuration).explorerMove(requestParameters.dataSourceId, requestParameters.requestData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rename
     * @param {ExplorerApiExplorerRenameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorerApi
     */
    public explorerRename(requestParameters: ExplorerApiExplorerRenameRequest, options?: any) {
        return ExplorerApiFp(this.configuration).explorerRename(requestParameters.dataSourceId, requestParameters.documentId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }
}
