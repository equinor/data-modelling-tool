/* tslint:disable */
/* eslint-disable */
/**
 * Data Modelling Tool
 * API for Data Modeling Tool (DMT)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { ErrorResponse } from '../models'
/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create Application
     * @param {string} dataSourceId
     * @param {string} applicationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApp: async (
      dataSourceId: string,
      applicationId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'dataSourceId' is not null or undefined
      assertParamExists('createApp', 'dataSourceId', dataSourceId)
      // verify required parameter 'applicationId' is not null or undefined
      assertParamExists('createApp', 'applicationId', applicationId)
      const localVarPath = `/api/v1/system/{data_source_id}/create-application/{application_id}`
        .replace(
          `{${'data_source_id'}}`,
          encodeURIComponent(String(dataSourceId))
        )
        .replace(
          `{${'application_id'}}`,
          encodeURIComponent(String(applicationId))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Generate Code With Plugin
     * @param {string} dataSourceId
     * @param {string} pluginName
     * @param {string} documentPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateCode: async (
      dataSourceId: string,
      pluginName: string,
      documentPath: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'dataSourceId' is not null or undefined
      assertParamExists('generateCode', 'dataSourceId', dataSourceId)
      // verify required parameter 'pluginName' is not null or undefined
      assertParamExists('generateCode', 'pluginName', pluginName)
      // verify required parameter 'documentPath' is not null or undefined
      assertParamExists('generateCode', 'documentPath', documentPath)
      const localVarPath = `/api/v1/system/{data_source_id}/generate-code/{plugin_name}/{document_path}`
        .replace(
          `{${'data_source_id'}}`,
          encodeURIComponent(String(dataSourceId))
        )
        .replace(`{${'plugin_name'}}`, encodeURIComponent(String(pluginName)))
        .replace(
          `{${'document_path'}}`,
          encodeURIComponent(String(documentPath))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Application Settings
     * @param {string} [applicationName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppSettings: async (
      applicationName?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/system/settings`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (applicationName !== undefined) {
        localVarQueryParameter['application_name'] = applicationName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Set Application Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAppSettings: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/system/settings`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create Application
     * @param {string} dataSourceId
     * @param {string} applicationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createApp(
      dataSourceId: string,
      applicationId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createApp(
        dataSourceId,
        applicationId,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Generate Code With Plugin
     * @param {string} dataSourceId
     * @param {string} pluginName
     * @param {string} documentPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async generateCode(
      dataSourceId: string,
      pluginName: string,
      documentPath: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.generateCode(
        dataSourceId,
        pluginName,
        documentPath,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Get Application Settings
     * @param {string} [applicationName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAppSettings(
      applicationName?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAppSettings(
        applicationName,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Set Application Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setAppSettings(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setAppSettings(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SystemApiFp(configuration)
  return {
    /**
     *
     * @summary Create Application
     * @param {string} dataSourceId
     * @param {string} applicationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApp(
      dataSourceId: string,
      applicationId: string,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .createApp(dataSourceId, applicationId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Generate Code With Plugin
     * @param {string} dataSourceId
     * @param {string} pluginName
     * @param {string} documentPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateCode(
      dataSourceId: string,
      pluginName: string,
      documentPath: string,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .generateCode(dataSourceId, pluginName, documentPath, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Application Settings
     * @param {string} [applicationName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppSettings(applicationName?: string, options?: any): AxiosPromise<any> {
      return localVarFp
        .getAppSettings(applicationName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Set Application Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAppSettings(options?: any): AxiosPromise<any> {
      return localVarFp
        .setAppSettings(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for createApp operation in SystemApi.
 * @export
 * @interface SystemApiCreateAppRequest
 */
export interface SystemApiCreateAppRequest {
  /**
   *
   * @type {string}
   * @memberof SystemApiCreateApp
   */
  readonly dataSourceId: string

  /**
   *
   * @type {string}
   * @memberof SystemApiCreateApp
   */
  readonly applicationId: string
}

/**
 * Request parameters for generateCode operation in SystemApi.
 * @export
 * @interface SystemApiGenerateCodeRequest
 */
export interface SystemApiGenerateCodeRequest {
  /**
   *
   * @type {string}
   * @memberof SystemApiGenerateCode
   */
  readonly dataSourceId: string

  /**
   *
   * @type {string}
   * @memberof SystemApiGenerateCode
   */
  readonly pluginName: string

  /**
   *
   * @type {string}
   * @memberof SystemApiGenerateCode
   */
  readonly documentPath: string
}

/**
 * Request parameters for getAppSettings operation in SystemApi.
 * @export
 * @interface SystemApiGetAppSettingsRequest
 */
export interface SystemApiGetAppSettingsRequest {
  /**
   *
   * @type {string}
   * @memberof SystemApiGetAppSettings
   */
  readonly applicationName?: string
}

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
  /**
   *
   * @summary Create Application
   * @param {SystemApiCreateAppRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public createApp(
    requestParameters: SystemApiCreateAppRequest,
    options?: any
  ) {
    return SystemApiFp(this.configuration)
      .createApp(
        requestParameters.dataSourceId,
        requestParameters.applicationId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Generate Code With Plugin
   * @param {SystemApiGenerateCodeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public generateCode(
    requestParameters: SystemApiGenerateCodeRequest,
    options?: any
  ) {
    return SystemApiFp(this.configuration)
      .generateCode(
        requestParameters.dataSourceId,
        requestParameters.pluginName,
        requestParameters.documentPath,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Application Settings
   * @param {SystemApiGetAppSettingsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public getAppSettings(
    requestParameters: SystemApiGetAppSettingsRequest = {},
    options?: any
  ) {
    return SystemApiFp(this.configuration)
      .getAppSettings(requestParameters.applicationName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Set Application Settings
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public setAppSettings(options?: any) {
    return SystemApiFp(this.configuration)
      .setAppSettings(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
